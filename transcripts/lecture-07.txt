[00:00:00.000 --> 00:00:10.000]   In the video lectures during the conference, there was not very much interaction between the teacher and the class.
[00:00:10.000 --> 00:00:23.000]   And so as you may understand, what you will be listening is not a copy of what I'm telling you right now.
[00:00:23.000 --> 00:00:41.000]   So I must confess that I'm pretty happy about this class because I had many questions, many interesting questions,
[00:00:41.000 --> 00:00:49.000]   which offered me the possibility to cover topics that otherwise I wouldn't be thinking about.
[00:00:49.000 --> 00:00:59.000]   So you won't be able to experience the same experience you were attending the class.
[00:00:59.000 --> 00:01:20.000]   Anyway, we will upload the video lectures of the first part of the course, which means the possibility of what I will tell you today.
[00:01:20.000 --> 00:01:38.000]   I must also confess that I'm a bit, I have been a bit slow.
[00:01:38.000 --> 00:01:41.000]   Also because of your questions.
[00:01:41.000 --> 00:01:49.000]   So I will not be able to cover all the topics I would like to cover by the end of today's class.
[00:01:49.000 --> 00:02:04.000]   My idea usually is to make a deep comparison between the GPA and general public license version two versus general public license version three.
[00:02:04.000 --> 00:02:14.000]   Today I will mostly cover version two, basically because I think version two is easier to understand.
[00:02:14.000 --> 00:02:26.000]   It is not written in a legal language and I think that is better than writing a license in a strictly legal language.
[00:02:26.000 --> 00:02:32.000]   Licensing, licenses are going to be used by coders, not lawyers.
[00:02:32.000 --> 00:02:33.000]   Okay.
[00:02:33.000 --> 00:02:39.000]   And so it's the coder that must understand the license.
[00:02:39.000 --> 00:02:44.000]   The legal wording makes everything more complicated.
[00:02:44.000 --> 00:02:49.000]   Everything uselessly more complicated.
[00:02:49.000 --> 00:02:56.000]   So that's the reason why I prefer version two of the license.
[00:02:56.000 --> 00:03:25.000]   You remember last time I told you that everything started with Richard Stadman working at the MIT, receiving, the MIT was receiving a new laser printer from Xerox that led to some problems in adopting the driver, the British driver they had at the MIT in the laboratory of artificial intelligence
[00:03:25.000 --> 00:03:28.000]   because the source code was not available.
[00:03:28.000 --> 00:03:34.000]   Sorry, I'm going to just silence my cell phone.
[00:03:34.000 --> 00:03:40.000]   I'm able to.
[00:03:40.000 --> 00:03:45.000]   That's weird.
[00:03:45.000 --> 00:03:55.000]   As you remember, it believed that the source code would come up somewhere by someone.
[00:03:55.000 --> 00:04:00.000]   He was able to meet the guy who wrote the driver.
[00:04:00.000 --> 00:04:02.000]   He asked him for the code.
[00:04:02.000 --> 00:04:11.000]   He said he couldn't give him the code because he signed a non-disclosure agreement with Xerox.
[00:04:11.000 --> 00:04:23.000]   Because by disclosing the source code of the driver, possibly some trade secrets had by Xerox could be exposed.
[00:04:23.000 --> 00:04:37.000]   That led Stadman to take a very strong approach against non-disclosure agreements and basically against the software industry as it was developing.
[00:04:37.000 --> 00:04:56.000]   Remember our previous lectures, we were talking about the development of the UNIX system, the concept of software portability which led to the possibility to have a software industry separated by the hardware industry.
[00:04:56.000 --> 00:05:06.000]   Moreover, the US Congress and later on the European Union adopted a specific legal protection of software based on copyright.
[00:05:06.000 --> 00:05:16.000]   But as I said, there are different layers of protection for software because you have secrecy.
[00:05:16.000 --> 00:05:24.000]   Then you have the fact that you can distribute the code in object code which is very readable.
[00:05:24.000 --> 00:05:26.000]   And then you have copyright.
[00:05:26.000 --> 00:05:29.000]   And then you even have patents.
[00:05:29.000 --> 00:05:46.000]   Anyway, the software industry was growing. It started using non-disclosure agreements and stuff like that, software licenses in order to restrict what people could do with software.
[00:05:46.000 --> 00:06:05.000]   Even though we saw that there are exceptions to the extension of the exclusive given copyright protection, there are more limitations in Europe than in the US.
[00:06:05.000 --> 00:06:14.000]   But nonetheless, what you can do with software is basically nothing. Just write it.
[00:06:14.000 --> 00:06:26.000]   Stalman didn't like the idea of that because he was living in an academic community and sharing code was like sharing knowledge.
[00:06:26.000 --> 00:06:42.000]   It's one of the basic principles of an academic community where we build new knowledge by collaboration, discussion and so on and so forth.
[00:06:42.000 --> 00:06:50.000]   So what he did was to resign from MIT. You remember we were talking about the work of hire.
[00:06:50.000 --> 00:06:57.000]   What happens if I write the code for an employer and I am an employee?
[00:06:57.000 --> 00:07:00.000]   The code is of the employer.
[00:07:00.000 --> 00:07:17.000]   So everything Stalman was going to write belonged to MIT. So in 1948, '48, '84, Stalman decided to resign from MIT.
[00:07:17.000 --> 00:07:32.000]   Well, it was just a formal resignation because he kept an office at the MIT laboratory of artificial intelligence.
[00:07:32.000 --> 00:07:41.000]   He decided to start a very ambitious project.
[00:07:41.000 --> 00:07:48.000]   It was something like Minix but on a much larger scale. You remember Minix?
[00:07:48.000 --> 00:07:57.000]   Minix was written by Tannenbaum, a professor of operating system design at the University of Amsterdam.
[00:07:57.000 --> 00:08:12.000]   The code starting with version 7 of the Unix release, the source code was not available any longer so students couldn't read the source code of Unix operating system any longer.
[00:08:12.000 --> 00:08:30.000]   So Minix decided to create a new Unix operating system and he called it GNU, which is a recursive acronym for "GNUs not Unix".
[00:08:30.000 --> 00:08:39.000]   He wrote in 1985 a manifesto asking for the collaboration by people to write that new operating system.
[00:08:39.000 --> 00:08:48.000]   Basically the operating system should be compatible with Unix. You remember the POSIX stuff Stalman had been working on.
[00:08:48.000 --> 00:09:01.000]   He also created the Free Software Foundation because he wanted to have a foundation who was the owner of the copyright on the operating system.
[00:09:01.000 --> 00:09:09.000]   You remember we were talking about the problems of jointly created software.
[00:09:09.000 --> 00:09:27.000]   It may be very difficult to enforce licenses on those types of software because it is created by many people and in some jurisdictions everyone contributing to the code must agree to enforce the license.
[00:09:27.000 --> 00:09:38.000]   Then he started releasing software under the Free Software umbrella.
[00:09:38.000 --> 00:09:49.000]   Let me see if I can...
[00:09:49.000 --> 00:10:16.000]   I can see what you see. The first program Stalman released was the GNU Emacs Editor.
[00:10:16.000 --> 00:10:25.000]   You know what Emacs is? It is the best editor in the world. No other editor is like Emacs.
[00:10:25.000 --> 00:10:41.000]   I'm an Emacs user. I use Emacs for everything. Reading the mail, writing, whatever.
[00:10:41.000 --> 00:10:51.000]   Emacs was actually created by Stalman in the mid 70s.
[00:10:51.000 --> 00:11:12.000]   You know Emacs is not an editor actually. Emacs is a list interpreter. A list interpreter which interprets lists or runs an editor.
[00:11:12.000 --> 00:11:31.000]   That's why Emacs is so beautiful. Anyway, the Emacs Editor was released within the members of the Laboratory of Artificial Intelligence at M18.
[00:11:31.000 --> 00:11:59.000]   As you may understand, being Emacs an extendable editor, being Emacs an e-list, because e-list is a dialect of list interpreter, it is highly customizable, highly configurable.
[00:11:59.000 --> 00:12:07.000]   What Stalman asked...
[00:12:07.000 --> 00:12:36.000]   Well, first of all, what happened was that everyone was writing code for his own version of Emacs, not sharing it. So Emacs within the environment of the AEI lab was becoming, how can I say, very very...
[00:12:36.000 --> 00:12:54.000]   ...incompatible. You couldn't sit at the desk of your colleague and run his or her Emacs editor because his or her Emacs editor was highly configured to fit his or her needs.
[00:12:54.000 --> 00:13:19.000]   So Stalman decided to create what was called the Emacs Communion. Everyone writing a piece of code for Emacs was required to send it to Stalman so that Stalman could incorporate that code in future release of the editor.
[00:13:19.000 --> 00:13:35.000]   But at some point, Stalman realized that that was not fair because he was basically the dictator of the Emacs Communion.
[00:13:35.000 --> 00:13:57.000]   Instead, he decided to take a different approach and to let people write a code, share the code, but not necessarily with the original owner of the Emacs editor.
[00:13:57.000 --> 00:14:22.000]   And so Stalman came up with the idea of the general public license. A license designed for the GNU operating system which was going to provide users with four basic freedoms.
[00:14:22.000 --> 00:14:37.000]   You know guys are crazy. You guys coders because you start counting by zero. So there are four freedoms, but there is freedom zero, which is the freedom to run the code.
[00:14:37.000 --> 00:14:59.000]   Freedom one, which is the freedom to study the code. So you need the source code. Then there is freedom two, which is the third one, which is the possibility to modify the code.
[00:14:59.000 --> 00:15:11.000]   And then there is freedom three, the fourth one, which is the right to distribute the modified code.
[00:15:11.000 --> 00:15:24.000]   Remember, if you take a piece of code and modify it, what you are actually doing is creating a derivative work. Okay? That's important.
[00:15:24.000 --> 00:15:34.000]   And yes. Can I sell this derivative work? Can I sell it? This derivative work?
[00:15:34.000 --> 00:15:57.000]   If the original work was released under the general public license, yes, you can do whatever you want. But for instance, keep in mind that by copyright law, creating a derivative work requires the authorization of the owner of the author of the original author.
[00:15:57.000 --> 00:16:08.000]   So that right is part of the exclusive right represented by the... So you need a license.
[00:16:08.000 --> 00:16:26.000]   In specifically, within the general public license, you can do whatever you want with the derivative code. You can sell it. You can distribute it for free. Or you can keep it for yourself.
[00:16:26.000 --> 00:16:37.000]   Can I put a new license to it? I mean, my own license, so others... No, we will come to that. That's not possible with the general public license.
[00:16:37.000 --> 00:16:48.000]   Because one of the requirements of the general public license is that you are not allowed to put further restrictions.
[00:16:48.000 --> 00:17:00.000]   Okay? So, I don't know whether we will have the time to do that, but there is the problem of license compatibility.
[00:17:00.000 --> 00:17:19.000]   Basically, we have two major types of free software licensing.
[00:17:19.000 --> 00:17:31.000]   You know, I prefer the term free software, but usually we say free and open source software. Free and open source software is too long.
[00:17:31.000 --> 00:17:57.000]   Free software is simple, clear. So free software can be divided in two classes. One is copy left and one is non-copy left.
[00:17:57.000 --> 00:18:14.000]   Copy left means that you must release a derivative work with the same license you received the original work.
[00:18:14.000 --> 00:18:28.000]   Okay? That's the definition of copy left. And we will see that general public license is a strong copy left license.
[00:18:28.000 --> 00:18:43.000]   On the other side, there are non-copy left licenses. The most famous of those licenses is the MIT license and the BSD license.
[00:18:43.000 --> 00:18:52.000]   Those licenses are non-copy left, which means that you can release a derivative work with a different license.
[00:18:52.000 --> 00:19:12.000]   Okay? So for instance, I can take a piece of code and release it with the BSD license, make a derivative work and release it with the general public license.
[00:19:12.000 --> 00:19:28.000]   But the contrary is not possible. For instance, I wrote, I don't even remember how many years ago, more than 10 years ago,
[00:19:28.000 --> 00:19:45.000]   an implementation of the citation style language. The citation style language is a sort of programming language for formatting citations in scientific papers.
[00:19:45.000 --> 00:20:07.000]   Do you know the title? The title is using the citation style language. I wrote an implementation in Asker, obviously, and I released it with a BSD license.
[00:20:07.000 --> 00:20:24.000]   I also integrated my implementation in a piece of code called Bandock. Do you know Bandock?
[00:20:24.000 --> 00:20:41.000]   She gave it a very nice piece of code written by a philosopher at the University of Berkeley in Asker. I contributed in cleaning up the code of Bandock.
[00:20:41.000 --> 00:20:56.000]   I wrote something for it. That's why I decided to write that implementation. Bandock is released with the general public license.
[00:20:56.000 --> 00:21:11.000]   Once I had two daughters, I decided that writing an implementation of this citation style language was not my priority or any longer.
[00:21:11.000 --> 00:21:27.000]   I also got bored. It was funny sometimes. The guy knew that using that implementation, Bandock, was very important.
[00:21:27.000 --> 00:21:46.000]   But he couldn't read my code. My code was very messy. It was my first implementation of a programming language. I did it as a professional coder.
[00:21:46.000 --> 00:22:08.000]   You can find the code if you want to have some fun. I can show you.
[00:22:08.000 --> 00:22:30.000]   That's the code. Let me show you the source. That's the source code. It's a mess. I understand.
[00:22:30.000 --> 00:22:44.000]   This citation style language is a mess. I understand that John didn't have time to dig into my code.
[00:22:44.000 --> 00:23:02.000]   At some point he was not able to fix the bugs. He took part of my code. Part was rewritten. He released it.
[00:23:02.000 --> 00:23:19.000]   [Inaudible]
[00:23:19.000 --> 00:23:33.000]   Yes?
[00:23:33.000 --> 00:23:55.000]   [Inaudible]
[00:23:55.000 --> 00:24:24.000]   So he took part of my code and released it under the -- oh, no. There is no license. I thought it was released.
[00:24:24.000 --> 00:24:49.000]   Yes. This library is a fork on my code. Yes. So, yes, this is why it is still a VST. I was pretty sure he rewrote it.
[00:24:49.000 --> 00:25:09.000]   I released it under the GPL. Sorry. Wrong example. He kept my VST license. I thought it changed in the GPL. That was legally possible.
[00:25:09.000 --> 00:25:21.000]   I didn't like to complain. I didn't care very much actually. You know why I released it with a VST license?
[00:25:21.000 --> 00:25:36.000]   A license that you can change. Because I'm getting paid by the university. I thought that that kind of job was part of my job.
[00:25:36.000 --> 00:25:55.000]   I was trying to create an infrastructure to write scientific papers and to be able to publish them in different journals with different citations, styles and stuff like that.
[00:25:55.000 --> 00:26:10.000]   I didn't actually care if someone was going to take my code and make a proprietary version. That's fine. Everything that makes our life easier is fine for me.
[00:26:10.000 --> 00:26:33.000]   So, I was not trying to make money out of that. Moreover, I wrote that code because Zotero started to use the citation style language as a scripting language.
[00:26:33.000 --> 00:26:56.000]   They were basically not complying with the specification. Instead, I wanted to have a citation style language with a standard specification so that many different implementations could be written.
[00:26:56.000 --> 00:27:08.000]   That was my goal basically. Then I got bored.
[00:27:08.000 --> 00:27:32.000]   If I had used GPL, then it was not going to be possible to make any modification of the GPL because the GPL is a copy left. Copy left means you need to use the same license you received the original word with.
[00:27:32.000 --> 00:27:44.000]   Anyway, if you think for a moment... Let's go.
[00:27:44.000 --> 00:28:02.000]   The fourth freedom, starting by zero obviously. As you may understand, the most important freedom is freedom number three, which is the fourth one.
[00:28:02.000 --> 00:28:21.000]   The freedom to improve the program and release your improvement to the public so that the whole community benefits. Access to the source code is a precondition of this.
[00:28:21.000 --> 00:28:42.000]   The GPL also requires that a modified version must be done under the terms and conditions of the GNU GPL and no further restriction can be applied to the program.
[00:28:42.000 --> 00:29:06.000]   Easy. But why should I abide by the GPL? Think about those freedoms.
[00:29:06.000 --> 00:29:20.000]   Think about their relationship with copyright. Under copyright, without the permission of the author, you cannot run the program.
[00:29:20.000 --> 00:29:40.000]   That's the general rule. You need permission. We call it a license. Under the copyright law, you do not have the freedom to study the program.
[00:29:40.000 --> 00:30:04.000]   You remember the end user license agreement we read by Microsoft? No decompilation, no disassembly, no nothing. You cannot do anything without the permission.
[00:30:04.000 --> 00:30:20.000]   Freedom three. Redistribution. And that cannot be done without the author's consent.
[00:30:20.000 --> 00:30:35.000]   Freedom four. So those freedoms are prohibited by copyright law unless you have the author, the copyright owner's permission.
[00:30:35.000 --> 00:30:53.000]   That's the default way copyright works. Is that clear? So, that's the key point.
[00:30:53.000 --> 00:31:11.000]   You are not required to accept this license since you have not signed it. However, nothing else grants you the permission to modify or distribute the program or its derivative works.
[00:31:11.000 --> 00:31:30.000]   These actions are prohibited by law if you do not accept this license. Therefore, by modifying or distributing the program or any work based on the program, you indicate your acceptance of this license to do so.
[00:31:30.000 --> 00:31:43.000]   And all its terms and conditions for copying, distributing or modifying the program or works based on it.
[00:31:43.000 --> 00:32:00.000]   In other words, all those freedoms do not exist unless you accept the license. And it is only by accepting the license that you get those freedoms.
[00:32:00.000 --> 00:32:15.000]   But if you accept the license, you also have to accept the condition set by the license.
[00:32:15.000 --> 00:32:32.000]   I told you Richard Stallman was a hacker. There are reports around the web about the experiences of coding with him.
[00:32:32.000 --> 00:32:43.000]   He's a very brilliant coder. He wrote Emacs.
[00:32:43.000 --> 00:33:04.000]   Would you conceive an editor as actually a Lisp interpreter? That's crazy. I mean, in my opinion, that's crazy. That's a very brilliant idea.
[00:33:04.000 --> 00:33:16.000]   That was the first program released under the GNU project. You know what was the second program released under the GNU project?
[00:33:16.000 --> 00:33:36.000]   The C compiler. I mean, do you have an idea what it takes to write a compiler?
[00:33:36.000 --> 00:33:48.000]   That's, I don't know, maybe you guys are writing compilers once a week. I don't know.
[00:33:48.000 --> 00:34:00.000]   It's a very difficult task. So he's a great coder. He's a crazy man. He's a genius. Believe me, I met him.
[00:34:00.000 --> 00:34:12.000]   He's a coder. Some better to spend an afternoon with him, but he is a genius.
[00:34:12.000 --> 00:34:32.000]   Still, even though I can appreciate the geniality of his code, still I believe that his greater achievement was hacking copyright law.
[00:34:32.000 --> 00:34:51.000]   Because the GPL is a hack of copyright law, it uses copyright in order to create a sort of public domain.
[00:34:51.000 --> 00:35:05.000]   But a public domain with some specific characters. You know, in the public domain you can go take whatever you want and just go.
[00:35:05.000 --> 00:35:16.000]   No. The free software and the GNU software you are allowed to take, but you must give back.
[00:35:16.000 --> 00:35:26.000]   You cannot take a software release with a general public license and make it a proprietary software.
[00:35:26.000 --> 00:35:39.000]   And why not? Because that would be free writing. And that would destroy free software.
[00:35:39.000 --> 00:35:54.000]   Probably you don't remember that, but during the late 90s, beginning of this century, Microsoft was very upset with the free software movement.
[00:35:54.000 --> 00:36:11.000]   Because they were sucking a lot in the server market. They had a web server which was, may I say crap? I did.
[00:36:11.000 --> 00:36:24.000]   They had a scripting language for writing web application, ASP as far as I remember, which was ugly.
[00:36:24.000 --> 00:36:46.000]   Their database technologies was... Instead, in the free and open source software community, we had an operating system, highly reliable, highly scalable.
[00:36:46.000 --> 00:37:00.000]   You can run Linux on a cell phone, on a laptop, on a desktop, on a mainframe, on a cluster of supercomputers.
[00:37:00.000 --> 00:37:05.000]   You have the source code. You can do whatever you want.
[00:37:05.000 --> 00:37:20.000]   Then we had the Apache web server, which I believe it is today the factor standard in the web.
[00:37:20.000 --> 00:37:37.000]   We had, now it is called Maria DB. My time was MySQL, which was a very powerful relational database.
[00:37:37.000 --> 00:37:47.000]   And then we have PHP, which was a scripting language for writing web application.
[00:37:47.000 --> 00:37:59.000]   I don't like PHP. I studied it. I wrote a wiki using it.
[00:37:59.000 --> 00:38:15.000]   It was my training in order to understand object oriented programming. Something that I like, but not that much.
[00:38:15.000 --> 00:38:33.000]   So the free software community had everything to run in the new... At that time, you were not there, but at that time it was called the new economy.
[00:38:33.000 --> 00:38:57.000]   And if you were a small startup wanting to have a web server with e-commerce and stuff like that, you could pay a huge amount of money to Microsoft to have a very poorly written software,
[00:38:57.000 --> 00:39:06.000]   or you could get for free the state of the art.
[00:39:06.000 --> 00:39:22.000]   That's why Microsoft started to say that the GPL was like a virus because it contaminates every piece of software it enters in contact with.
[00:39:22.000 --> 00:39:40.000]   Well, from their perspective, that was true. They couldn't take a piece of code released with the GPL and use it in their operating system and the other stuff they were writing.
[00:39:40.000 --> 00:39:50.000]   The GPL. But they could do with the DSD.
[00:39:50.000 --> 00:40:13.000]   You know, I think that the first version of the Windows operating system, Windows NT, with the complete TCP/IP stack came out at the end of the 90s.
[00:40:13.000 --> 00:40:24.000]   You know where that TCP/IP stack came from?
[00:40:24.000 --> 00:40:33.000]   From the birthplace of third distribution. We will see how and why.
[00:40:33.000 --> 00:40:43.000]   So let's go back to the GPL. The GPL is a hack of copyright. Copyright is meant to create an exclusive right.
[00:40:43.000 --> 00:40:52.000]   The GPL is using copyright to make an inclusive right.
[00:40:52.000 --> 00:41:09.000]   Copyright uses copyright law but flips it over to serve the opposite of its usual purpose. Instead of a means of privatizing software, it becomes a means of keeping software free.
[00:41:09.000 --> 00:41:30.000]   The central idea of copyright is that we give everyone permission to run the program, copy the program, modify the program, distribute, modify the version, but not permission to add restrictions of their own.
[00:41:30.000 --> 00:41:45.000]   Thus, the crucial freedoms that define free software are guaranteed to everyone who has a copy. They became in and out rights.
[00:41:45.000 --> 00:41:53.000]   So sometimes my pronunciation goes crazy.
[00:41:53.000 --> 00:42:11.000]   That's a brilliant idea. It didn't come from a lawyer, it came from a hacker.
[00:42:11.000 --> 00:42:23.000]   You can read that stuff. That's the usual stuff you find in proprietary software too.
[00:42:23.000 --> 00:42:37.000]   Anyway, with the GPL you may take those limitations of liability and exclusion of warranty by getting paid.
[00:42:37.000 --> 00:43:00.000]   That's why it is possible to create a business model with free software. You may offer a warranty or you may offer a responsibility if you want to get paid.
[00:43:00.000 --> 00:43:14.000]   Or you may ask money for improvements. Free software does not mean gratis.
[00:43:14.000 --> 00:43:34.000]   Free software means freedom to run, study, modify, distribute, modify the version of software. That's what free software means.
[00:43:34.000 --> 00:43:56.000]   There was a problem though. Stalman started writing the GNU operating system. He released the Emacs editor, he released the C compiler, which is now called the GNU compiler collection.
[00:43:56.000 --> 00:44:06.000]   It compiles everything I think in object code and so on and so forth.
[00:44:06.000 --> 00:44:26.000]   You remember I told you, you know better than me, I'm not really proficient with the C programming language. I must confess. I can read it, I can write something, but I'm not really familiar with it.
[00:44:26.000 --> 00:44:45.000]   But you know that in order to run, the core of the language is really small, so in order to run the program you need a library. The C standard library.
[00:44:45.000 --> 00:45:02.000]   Even the Linux kernel cannot be run without the C library. Possibly it could be run with a statically named library. I'm not sure, I think.
[00:45:02.000 --> 00:45:30.000]   It doesn't mean anything statically or dynamically named library. Even though we may make a distinction.
[00:45:30.000 --> 00:45:40.000]   That's a program which uses a few libraries.
[00:45:40.000 --> 00:46:03.000]   You use libraries like that. There are two ways of using those libraries. One, it is to statically link the library.
[00:46:03.000 --> 00:46:23.000]   That is to say, in your program you have a function, let's call function1, you use function1 here, and at compilation time you take the function, you copy the function here and you produce the object code.
[00:46:23.000 --> 00:46:41.000]   Statically linked library. Or instead you can dynamically link the library, which means that when you run the code,
[00:46:41.000 --> 00:47:00.000]   the kernel will also load the library so that the program will use the function at runtime.
[00:47:00.000 --> 00:47:19.000]   But that doesn't really make any real distinction because anyway this program is a derivative work of the library.
[00:47:19.000 --> 00:47:41.000]   If you distribute the code statically linked, then that code is a derivative work. If you distribute the code to be dynamically linked, the object code is not a derivative work.
[00:47:41.000 --> 00:47:52.000]   But when you start running it, it becomes a derivative work because it incorporates the function taken from the library.
[00:47:52.000 --> 00:47:57.000]   Is that clear? It should be clear for you.
[00:47:57.000 --> 00:48:02.000]   From a legal perspective, that doesn't change anything.
[00:48:02.000 --> 00:48:15.000]   But when you run the program, you are running a derivative work of the library. That's it. There is no way out.
[00:48:15.000 --> 00:48:37.000]   And what was the problem? The GNU software at the end of the 80s, we had Emacs compiler and then the C library.
[00:48:37.000 --> 00:48:46.000]   The GNU C library. But what was the problem?
[00:48:46.000 --> 00:49:06.000]   That since the C library was going to become the original work of every program using it, the C library could not be run on a non-free operating system.
[00:49:06.000 --> 00:49:26.000]   That is to say, if you wanted to run the C library on an operating system, which was the IBM version of the Unix, the original Unix,
[00:49:26.000 --> 00:49:42.000]   well, it was not possible because the kernel of the AIX was becoming a derivative work of the library.
[00:49:42.000 --> 00:50:05.000]   But since the library was released with general public license, then also the kernel of AIX, I used to call it AIX because of that time.
[00:50:05.000 --> 00:50:18.000]   And that was not possible because IBM wouldn't release their kernel as a free software under the general public license.
[00:50:18.000 --> 00:50:26.000]   And so the Free Software Foundation came up with an idea.
[00:50:26.000 --> 00:50:38.000]   Well, redefine the legal term derivative work. And what is a derivative work of a library?
[00:50:38.000 --> 00:50:48.000]   The program using the library? Yes. From a legal perspective.
[00:50:48.000 --> 00:51:07.000]   But instead, the Free Software Foundation came up with a new idea. No, they said, using the library doesn't make the program which uses the library a derivative work of the library.
[00:51:07.000 --> 00:51:21.000]   It is just a program used in the library. Within the library, a derivative work is just a modified version of the library.
[00:51:21.000 --> 00:51:31.000]   And that's the GNU library or lesser general public license.
[00:51:31.000 --> 00:51:45.000]   The reason we have a separate public license for some library is that they blur the distinction we usually make between modifying or adding to a program or simply using.
[00:51:45.000 --> 00:52:01.000]   Linking a program with the library without changing the library is in some sense simply using the library. Okay? So it's a new definition of derivative work.
[00:52:01.000 --> 00:52:30.000]   Well, as you may understand, that was a strategic move. We started releasing libraries with that license, but later on, when people will rely on those libraries, we will change the library into GPL so that everyone using the library will be forced to GPL the software using the library.
[00:52:30.000 --> 00:52:38.000]   Everything clear so far?
[00:52:38.000 --> 00:52:45.000]   Is it easy to change the license of a library?
[00:52:45.000 --> 00:53:01.000]   Well, by releasing a new version. But usually, if you get a library with the LGPL, you can still use it.
[00:53:01.000 --> 00:53:13.000]   But you know, libraries are going to change and they are becoming incompatible, so sticking with an old version of the library becomes very difficult sometimes.
[00:53:13.000 --> 00:53:23.000]   But legally, you can still use the original library and release it with the LGPL. No problem.
[00:53:23.000 --> 00:53:38.000]   I cannot change a license of a program already licensed. Okay?
[00:53:38.000 --> 00:53:54.000]   So in 1881, we had Emacs, the GNU compiler collection, system libraries, utilities, but still not Kerl.
[00:53:54.000 --> 00:54:05.000]   And we end our class at one o'clock. Is that correct?
[00:54:05.000 --> 00:54:09.000]   It wasn't well-gifted.
[00:54:09.000 --> 00:54:16.000]   What?
[00:54:16.000 --> 00:54:26.000]   Well, I can stay here on the afternoon. No problem.
[00:54:26.000 --> 00:54:36.000]   At least 15 minutes. Maximum 1.15. Okay?
[00:54:36.000 --> 00:54:46.000]   Hopefully, I will give you the possibility to eat more and eat slower.
[00:54:46.000 --> 00:55:00.000]   So in 1891, we didn't have anything to completely run a computer or a free... with free software.
[00:55:00.000 --> 00:55:15.000]   And I remembered that time actually, because I had an account on an AIX system at the Department of Sociology.
[00:55:15.000 --> 00:55:21.000]   But I didn't like the shell they were providing me with.
[00:55:21.000 --> 00:55:44.000]   So I compiled the Bash shell, installed it, and I installed some of the stuff of the GNU operating system.
[00:55:44.000 --> 00:55:48.000]   But no Kerl, so...
[00:55:48.000 --> 00:56:09.000]   And what happens? In 1981, at the end of... at the beginning of October, a guy from Finland released what is called Linux, which was Kerl.
[00:56:09.000 --> 00:56:30.000]   The first message Linux sent to the Minix mailing list was asking for a copy of POSIX, because he wanted to write a kernel which was binary compatible with Unix.
[00:56:30.000 --> 00:56:44.000]   So the first release of the Linux kernel was in October '91. There was no license.
[00:56:44.000 --> 00:56:50.000]   The code was released with a node, do whatever you want.
[00:56:50.000 --> 00:56:58.000]   And that project started to attract a huge amount of attention.
[00:56:58.000 --> 00:57:21.000]   And the next year, in November 1982, with version 0.12, there was an agreement within the community developing Linux, the kernel, to adopt the GNU General Public License.
[00:57:21.000 --> 00:57:35.000]   The reason was that basically Linus Torvald himself was using the GNU toolchain to write the code.
[00:57:35.000 --> 00:57:39.000]   So he said, "Well, let's use the license."
[00:57:39.000 --> 00:57:45.000]   Also because there was some pressure to do that.
[00:57:45.000 --> 00:57:58.000]   So, in 1993, we started to have the first Linux distribution.
[00:57:58.000 --> 00:58:09.000]   Starman was quite upset because everyone was calling them Linux distributions, but most of the code in the Linux distribution was actually GNU.
[00:58:09.000 --> 00:58:15.000]   So he said, "We should call it the GNU Linux operating system."
[00:58:15.000 --> 00:58:20.000]   Also because the Free Software Foundation was working with kernel.
[00:58:20.000 --> 00:58:28.000]   At that time there was a very interesting discussion about how you should be designing the kernel.
[00:58:28.000 --> 00:58:40.000]   The guys at the Free Software Foundation wanted to have a micro kernel made of small servers communicated between them.
[00:58:40.000 --> 00:58:48.000]   The problem was that debugging that type of design was very difficult, so they didn't come up with anything useful.
[00:58:48.000 --> 00:59:02.000]   Instead, Linus decided for a monolithic kernel, just read the code, and you will enjoy the dimension of the project.
[00:59:02.000 --> 00:59:22.000]   So, in 1983, the first... I don't remember the name of the first Linux distribution, but I remember the name of the second Linux distribution.
[00:59:22.000 --> 00:59:39.000]   Which is the one I'm running, Strackware. It was released in 1983.
[00:59:39.000 --> 00:59:44.000]   I shouldn't tell you that, but that's funny.
[00:59:44.000 --> 00:59:53.000]   At that time I was studying in New York City at the City University of New York. I was going to the computer lab every day.
[00:59:53.000 --> 01:00:01.000]   Once I saw an advertisement by a guy, a Chinese guy, who studied there too.
[01:00:01.000 --> 01:00:15.000]   He said, "Do you want to run a Unix operating system on your laptop? Give me $100 and I will install it. One for you, for just $100."
[01:00:15.000 --> 01:00:31.000]   I said, "I would like to run a Unix operating system." I had a laptop with Windows 3.1 and it was sucking a lot.
[01:00:31.000 --> 01:00:44.000]   I wanted to have Unix because I was working on Unix remotely, but I wanted to.
[01:00:44.000 --> 01:00:56.000]   So I met the guy and I had bought my $100 with me. It was funny because the guy started to install...
[01:00:56.000 --> 01:01:02.000]   I think it was not Strackware, it was the previous one.
[01:01:02.000 --> 01:01:17.000]   It started to install the operating system, but it forgot to enable the swap.
[01:01:17.000 --> 01:01:36.000]   If you have some familiarity with Linux, it's a piece of beautiful memory that resides on the hard drive to extend the available memory.
[01:01:36.000 --> 01:01:57.000]   During the process, it forgot to activate the swap and my system didn't have enough RAM to load the programs to copy the files on my machine.
[01:01:57.000 --> 01:02:11.000]   We spent three or four hours in the computer lab and the guy was desperate because he couldn't understand what was going on.
[01:02:11.000 --> 01:02:28.000]   I understood it. During those three hours, I had enough information to install it by myself.
[01:02:28.000 --> 01:02:47.000]   The only problem was that it just formatted my hard drive. At the end, he said "I'm sorry, I cannot give you $100 just for formatting my hard drive because I don't have anything to run on my computer.
[01:02:47.000 --> 01:02:58.000]   Thank you anyway for wasting your time, but that's your problem. We were in the United States free market and stuff like that.
[01:02:58.000 --> 01:03:03.000]   If you want to get paid, you must do the job."
[01:03:03.000 --> 01:03:25.000]   I remember it was Saturday afternoon, so on Monday morning, I went with Floppy on a computer shop and I was pretending to try different computers.
[01:03:25.000 --> 01:03:35.000]   I inserted Floppy and I copied the DOS operating system and a modern program.
[01:03:35.000 --> 01:03:44.000]   I went back home and installed the DOS operating system on my laptop.
[01:03:44.000 --> 01:04:04.000]   I downloaded it and it took me 24 hours, literally 24 hours. I downloaded this lacquer operating system and after 24 hours, I was able to get the prompt of a login.
[01:04:04.000 --> 01:04:19.000]   I was able to login as a root. It was difficult. I'm telling you because at that time it was difficult to run a free operating system, but I succeeded.
[01:04:19.000 --> 01:04:24.000]   It was late for one night, but I succeeded.
[01:04:24.000 --> 01:04:42.000]   That was the very beginning. A few months later, Red Hat started to appear. They had that beautiful graphical installation process and so on and so forth.
[01:04:42.000 --> 01:04:54.000]   A new business model started to appear.
[01:04:54.000 --> 01:05:16.000]   That was in 1993, 1994, 1995. The internet started to grow in popularity, not just by students and academics.
[01:05:16.000 --> 01:05:27.000]   The first internet service providers started to appear and at that time what was called the new economy started to flourish.
[01:05:27.000 --> 01:05:38.000]   Free software was one of the conditions to make that flourish take place.
[01:05:38.000 --> 01:05:51.000]   You can go back. There are interviews about the future of the internet as perceived by Bill Gates at the beginning of the 90s.
[01:05:51.000 --> 01:05:57.000]   He said, "Well, that's not important. This is not going to change anything."
[01:05:57.000 --> 01:06:17.000]   They really didn't understand Gates and possibly Jobs, what was going to change with the internet and the social penetration of the internet.
[01:06:17.000 --> 01:06:36.000]   So, the infrastructure of the web was basically created by free software and that made free software very successful.
[01:06:36.000 --> 01:06:52.000]   You know, everyone, unless those unlucky guys using Microsoft, everyone is using otherwise some piece of free software.
[01:06:52.000 --> 01:07:09.000]   Your Apple machine is running an operating system which has been derived from the VST, family of operating systems.
[01:07:09.000 --> 01:07:23.000]   That was made possible because VST is not copy left. Android is based on Linux.
[01:07:23.000 --> 01:07:31.000]   So, Linux is probably the most successful operating system right now.
[01:07:31.000 --> 01:07:40.000]   Units in general.
[01:07:40.000 --> 01:07:58.000]   Very quickly, but there is a counter-on clash between the GNU model and the Linux community.
[01:07:58.000 --> 01:08:06.000]   The free software foundation was created when the internet was not available for everyone.
[01:08:06.000 --> 01:08:17.000]   In order to contribute to a GNU project, you had to send tapes.
[01:08:17.000 --> 01:08:33.000]   Linux was developed when the internet was pretty common among scholars, among students, among guys like House.
[01:08:33.000 --> 01:08:48.000]   And the free software foundation wanted to have a very organized way of creating that common property of free software.
[01:08:48.000 --> 01:08:57.000]   Which required licenses, you know, fiduciary license agreements and stuff like that.
[01:08:57.000 --> 01:09:10.000]   The Linux kernel was developed by a young coder using their internet connection and using the email to send and exchange patches.
[01:09:10.000 --> 01:09:13.000]   Bug reports and stuff like that.
[01:09:13.000 --> 01:09:17.000]   Two different models.
[01:09:17.000 --> 01:09:30.000]   Probably I've already told you that we're speaking.
[01:09:30.000 --> 01:09:51.000]   Oh, I want it in English.
[01:09:51.000 --> 01:10:02.000]   If you want to deeply understand those differences, you should be reading Eric Raymond's The Cathedral and the Bazaar.
[01:10:02.000 --> 01:10:07.000]   Where the cathedral is the free software foundation.
[01:10:07.000 --> 01:10:22.000]   The Bazaar instead is the disorganized development model of the Linux kernel.
[01:10:22.000 --> 01:10:30.000]   Two different approaches, two different generations, two different cultures.
[01:10:30.000 --> 01:10:42.000]   So, everything was there.
[01:10:42.000 --> 01:10:47.000]   But that's just one part of the story actually.
[01:10:47.000 --> 01:10:52.000]   The other part I will go very briefly.
[01:10:52.000 --> 01:11:09.000]   Because that is called what I describe as what I call the East Coast Free Software approach.
[01:11:09.000 --> 01:11:13.000]   Because there is also a West Coast.
[01:11:13.000 --> 01:11:23.000]   I like jazz music and there is the East Coast and jazz music and West Coast.
[01:11:23.000 --> 01:11:25.000]   Jazz music, you know, art, paper and stuff like that.
[01:11:25.000 --> 01:11:32.000]   Forget it.
[01:11:32.000 --> 01:11:50.000]   And then, after writing the Unix operating system, together with Richte, I became a visiting professor at the University of Berkeley.
[01:11:50.000 --> 01:11:59.000]   And Berkeley became a center of development of Unix related technology.
[01:11:59.000 --> 01:12:14.000]   There was a guy, Bill Joy, who later founded the Sun Microsystem. Am I right?
[01:12:14.000 --> 01:12:30.000]   Also, yes, Sun Microsystem. I was right.
[01:12:30.000 --> 01:12:43.000]   He started to create a software, what is called the Berkeley Software Distribution, putting together some add-ons for the Unix operating system.
[01:12:43.000 --> 01:12:51.000]   First, it was an editor.
[01:12:51.000 --> 01:13:06.000]   What became the V editor?
[01:13:06.000 --> 01:13:16.000]   The V editor.
[01:13:16.000 --> 01:13:18.000]   I don't like V very much.
[01:13:18.000 --> 01:13:22.000]   I'm just confused.
[01:13:22.000 --> 01:13:29.000]   Even though I can understand some may be I did.
[01:13:29.000 --> 01:13:33.000]   And it was called compiler.
[01:13:33.000 --> 01:13:42.000]   So, they started putting together what became the Berkeley Software Distribution.
[01:13:42.000 --> 01:14:02.000]   But for using the Berkeley Software Distribution, you still needed a regular AT&T Unix license because that stuff was running only on the AT&T Unix.
[01:14:02.000 --> 01:14:08.000]   Unix operating system.
[01:14:08.000 --> 01:14:12.000]   What happened?
[01:14:12.000 --> 01:14:32.000]   In the second half of the 70s, DARPA was financing the development of what became the TCP/IP stack, the suite of protocols that are running the internet.
[01:14:32.000 --> 01:14:40.000]   And they wanted to have a reference implementation.
[01:14:40.000 --> 01:14:52.000]   And they decided that the best way to have a reference implementation was to have a reference implementation for the Unix operating system.
[01:14:52.000 --> 01:15:08.000]   So, in 1879, at Berkeley, the computer systems research group was created.
[01:15:08.000 --> 01:15:16.000]   They developed the implementation of the TCP/IP stack.
[01:15:16.000 --> 01:15:31.000]   And they released it with the Berkeley Software Distribution 4.2 with the TCP/IP stack together with Unix operating system.
[01:15:31.000 --> 01:15:47.000]   Later on, in 18... also because you remember that from the first of January of 1983, DARPA net switched to the TCP/IP stack.
[01:15:47.000 --> 01:16:01.000]   In 1989, Berkeley also released only the internet stack alone that was the BSD network release.
[01:16:01.000 --> 01:16:06.000]   And it was a free software, the first free software.
[01:16:06.000 --> 01:16:09.000]   The code was written by them.
[01:16:09.000 --> 01:16:38.000]   They created the BSD license and they released the TCP/IP stack which was later on used by Microsoft to give their operating system a sort of capability of connecting the internet.
[01:16:38.000 --> 01:17:03.000]   After the release of the BSD network release, there was the pressure to have a full BSD Unix-like free operating system.
[01:17:03.000 --> 01:17:08.000]   So, you know, we have two text books.
[01:17:08.000 --> 01:17:22.000]   Of course, material.
[01:17:22.000 --> 01:17:33.000]   And non-attending students are required to read voices from the open source revolution.
[01:17:33.000 --> 01:17:46.000]   And you can read...
[01:17:46.000 --> 01:17:52.000]   The story here.
[01:17:52.000 --> 01:18:04.000]   In two years they were able to, with the help of many people, to re-write all the Unix operating systems.
[01:18:04.000 --> 01:18:23.000]   And in 1982, a BSD for the 386 architecture was released without...
[01:18:23.000 --> 01:18:43.000]   Sorry, in 1991, there was the BSD network release 2 which was a Unix-like operating system without AT&T code except for six other files.
[01:18:43.000 --> 01:18:53.000]   Yet, if you know to see better than me, Yeter just exposed the interface.
[01:18:53.000 --> 01:19:09.000]   But a year later they were able to release BSD without removing all those six files.
[01:19:09.000 --> 01:19:18.000]   And then, starting from a couple of years later, three different flavors of BSD.
[01:19:18.000 --> 01:19:23.000]   Unix-like free operating system started to appear.
[01:19:23.000 --> 01:19:27.000]   NetBSD, FreeBSD, OpenBSD.
[01:19:27.000 --> 01:19:32.000]   And then a huge mistake was made.
[01:19:32.000 --> 01:19:42.000]   Because, you know, that's typical of American universities. We are trying to import that model.
[01:19:42.000 --> 01:19:46.000]   Making business out of research.
[01:19:46.000 --> 01:19:52.000]   You should be doing research, not making business.
[01:19:52.000 --> 01:20:01.000]   What they did was to create the start-up, the software distribution incorporation.
[01:20:01.000 --> 01:20:06.000]   And they started selling their BSD code as Unix.
[01:20:06.000 --> 01:20:17.000]   They even had a telephone number, an AT telephone number with a Unix name in it.
[01:20:17.000 --> 01:20:25.000]   That's crazy because it was obvious that Unix was AT&T.
[01:20:25.000 --> 01:20:30.000]   There was BSD.
[01:20:30.000 --> 01:20:39.000]   So AT&T sued for copyright and trademark infringement.
[01:20:39.000 --> 01:20:44.000]   Then AT&T sold the Unix copyright to Novem.
[01:20:44.000 --> 01:20:51.000]   And Novem in 1894 reached an agreement with Berkeley.
[01:20:51.000 --> 01:20:59.000]   So BSD in 1884 became free software.
[01:20:59.000 --> 01:21:08.000]   Now you may ask, why did Novem reach an agreement?
[01:21:08.000 --> 01:21:14.000]   Since it was obvious that there was some copyright infringement.
[01:21:14.000 --> 01:21:28.000]   You know, because Thompson probably, as far as we know, probably Thompson and Rick, they were brilliant coders, but lazy guys.
[01:21:28.000 --> 01:21:37.000]   And they forgot to place a copyright notice in the source code of the Unix operating system.
[01:21:37.000 --> 01:21:51.000]   And you remember before 1976, in order to acquire copyright protection, you needed to place a copyright notice on your intellectual work.
[01:21:51.000 --> 01:22:16.000]   So Novem decided to reach an out of court agreement because they didn't want to risk the possibility of the judge stating that AT&T Unix was not copyrightable.
[01:22:16.000 --> 01:22:22.000]   Because of the lack of a copyright notice.
[01:22:22.000 --> 01:22:29.000]   The agreement was kept secret for many years.
[01:22:29.000 --> 01:22:36.000]   It was probably some time, I don't know.
[01:22:36.000 --> 01:22:46.000]   Anyway, Linux was three years ahead.
[01:22:46.000 --> 01:23:11.000]   And so the east coast, the bebop style of free software won over the cool west coast BSD approach.
[01:23:11.000 --> 01:23:18.000]   Still BSD was not copyright.
[01:23:18.000 --> 01:23:28.000]   The west side was based on the free software foundation and the cathedral.
[01:23:28.000 --> 01:23:38.000]   Because they wanted to use the legal system to create a commons of software.
[01:23:38.000 --> 01:23:43.000]   The guys at Berkeley wanted just to share code.
[01:23:43.000 --> 01:23:59.000]   They didn't have any ethical approach to that.
[01:23:59.000 --> 01:24:07.000]   I've never installed BSD actually.
[01:24:07.000 --> 01:24:17.000]   Anyway, Linux and BSD are still POSIX compatible.
[01:24:17.000 --> 01:24:28.000]   You can run a piece of code on BSD or Linux.
[01:24:28.000 --> 01:24:44.000]   I have a question about the GPL. Doesn't the fact that it spreads like a virus instill fears or limits the user in company environments or things like that?
[01:24:44.000 --> 01:24:51.000]   Or even in normal?
[01:24:51.000 --> 01:25:01.000]   Maybe. But I would say that it's an outdated question.
[01:25:01.000 --> 01:25:06.000]   It's not relevant anymore.
[01:25:06.000 --> 01:25:22.000]   Because it is true that GPL does not permit the reuse of code outside of free software.
[01:25:22.000 --> 01:25:33.000]   And I can understand that the corporate business community may be afraid of that.
[01:25:33.000 --> 01:25:39.000]   But from the perspective of the free software foundation, who cares?
[01:25:39.000 --> 01:25:51.000]   After all, we demonstrated that unless in very small domains, free software is better.
[01:25:51.000 --> 01:25:56.000]   So who cares?
[01:25:56.000 --> 01:26:06.000]   On the other side, and that's my last thought.
[01:26:06.000 --> 01:26:14.000]   The part of the free software movement understood that that could be a problem.
[01:26:14.000 --> 01:26:24.000]   And they wanted to have a more sympathetic approach towards the business community.
[01:26:24.000 --> 01:26:30.000]   First they understand that free software was scary for them.
[01:26:30.000 --> 01:26:38.000]   Because free means free beer. You don't get paid.
[01:26:38.000 --> 01:26:45.000]   The business community is based on profits.
[01:26:45.000 --> 01:26:53.000]   That's the reason why open source started to become another terminology.
[01:26:53.000 --> 01:27:00.000]   Because open source means that you can read the code.
[01:27:00.000 --> 01:27:05.000]   And by reading the code, you write a better code.
[01:27:05.000 --> 01:27:09.000]   More secure code.
[01:27:09.000 --> 01:27:33.000]   This is free software I wrote.
[01:27:33.000 --> 01:27:39.000]   Which may also be called open source software.
[01:27:39.000 --> 01:27:43.000]   How many people read that code?
[01:27:43.000 --> 01:27:53.000]   Myself, John, the author of the book, and no one else.
[01:27:53.000 --> 01:27:56.000]   That's a pretty stupid argument.
[01:27:56.000 --> 01:28:05.000]   It is true for the Linux kernel, because the Linux kernel is very popular.
[01:28:05.000 --> 01:28:09.000]   There are thousands and thousands of contributors.
[01:28:09.000 --> 01:28:11.000]   They read the code.
[01:28:11.000 --> 01:28:13.000]   There is a peer review.
[01:28:13.000 --> 01:28:18.000]   But that's not a specific character of free software.
[01:28:18.000 --> 01:28:23.000]   There are many projects that are read by just the author.
[01:28:23.000 --> 01:28:29.000]   Is that code secure?
[01:28:29.000 --> 01:28:40.000]   I tried to write it secure, but there is no one that can confirm.
[01:28:40.000 --> 01:28:48.000]   So open source doesn't mean anything.
[01:28:48.000 --> 01:29:01.000]   What you can say is, is a non-copyleft license more compatible with the business community?
[01:29:01.000 --> 01:29:04.000]   And the answer is yes.
[01:29:04.000 --> 01:29:24.000]   But there are many situations in which the use of a non-copyleft license led to the death of a free software project.
[01:29:24.000 --> 01:29:34.000]   And the born and prospiration of a proprietary version.
[01:29:34.000 --> 01:29:45.000]   Which from the perspective of the free software movement is bad.
[01:29:45.000 --> 01:29:54.000]   Now when we start talking about... that's an interesting topic if you want to write a paper on it.
[01:29:54.000 --> 01:29:58.000]   Because I don't want to remember the details.
[01:29:58.000 --> 01:30:08.000]   Think about cloud computing, the infrastructure you need to create...
[01:30:08.000 --> 01:30:14.000]   Amazon, Google...
[01:30:14.000 --> 01:30:20.000]   They are using free software.
[01:30:20.000 --> 01:30:27.000]   And there is a debate whether they are contributing back.
[01:30:27.000 --> 01:30:32.000]   Most of the time they are not.
[01:30:32.000 --> 01:30:38.000]   And that's a problem because that's free writing.
[01:30:38.000 --> 01:30:43.000]   You know, what is free writing?
[01:30:43.000 --> 01:30:47.000]   Think about public transportation.
[01:30:47.000 --> 01:30:54.000]   Public transportation is based on the fact that people are paying the ticket.
[01:30:54.000 --> 01:31:04.000]   If no one is going to pay the ticket any longer, public transportation will collapse.
[01:31:04.000 --> 01:31:11.000]   And the damage will be shared among everyone.
[01:31:11.000 --> 01:31:24.000]   So, yes, yours is an interesting topic but I believe that right now...
[01:31:24.000 --> 01:31:34.000]   I think only a minority of people are using software installed on their machine.
[01:31:34.000 --> 01:31:41.000]   Many of my colleagues are writing their papers using Google...
[01:31:41.000 --> 01:31:50.000]   What is the name? Google Workspace?
[01:31:50.000 --> 01:32:03.000]   Google...
[01:32:03.000 --> 01:32:07.000]   This is what I remember.
[01:32:25.000 --> 01:32:33.000]   Sorry, I don't want to use the password.
[01:32:33.000 --> 01:32:37.000]   I'm sorry.
[01:32:37.000 --> 01:32:45.000]   I'm sorry.
[01:32:45.000 --> 01:32:49.000]   I'm sorry.
[01:32:49.000 --> 01:32:53.000]   I'm sorry.
[01:32:53.000 --> 01:32:57.000]   I'm sorry.
[01:32:57.000 --> 01:33:01.000]   I'm sorry.
[01:33:01.000 --> 01:33:09.000]   I'm sorry.
[01:33:09.000 --> 01:33:13.000]   I'm sorry.
[01:33:13.000 --> 01:33:17.000]   I'm sorry.
[01:33:17.000 --> 01:33:21.000]   I'm sorry.
[01:33:21.000 --> 01:33:29.000]   Shit.
[01:33:29.000 --> 01:33:40.000]   Well...
[01:33:40.000 --> 01:34:02.000]   That's a good one.
[01:34:02.000 --> 01:34:11.000]   Google Docs, Google, that kind of stuff.
[01:34:11.000 --> 01:34:14.000]   What?
[01:34:14.000 --> 01:34:23.000]   You didn't see anything?
[01:34:23.000 --> 01:34:33.000]   You know what I mean?
[01:34:33.000 --> 01:34:45.000]   Sheets, slides and that kind of stuff.
[01:34:45.000 --> 01:34:55.000]   That's not software running on your machine.
[01:34:55.000 --> 01:35:05.000]   Yes, there is a piece of JavaScript that connects with the Google server but the software is running there.
[01:35:05.000 --> 01:35:15.000]   It's just a connection with the software. We will be talking about software as a service.
[01:35:15.000 --> 01:35:17.000]   So I don't remember the question anyway.
[01:35:17.000 --> 01:35:21.000]   What was the question?
[01:35:21.000 --> 01:35:41.000]   That's the reason why I think even free software is something of the past.
[01:35:41.000 --> 01:35:55.000]   Can you read the source code? Maybe yes. Can you modify the source code? No, because the code is run by some corporation in a data center in Ireland.
[01:35:55.000 --> 01:36:05.000]   So freedom doesn't exist any longer.
[01:36:05.000 --> 01:36:09.000]   Questions?
[01:36:09.000 --> 01:36:17.000]   The problem is that it's not an operation, it's a kernel.
[01:36:17.000 --> 01:36:25.000]   And the kernel is the most crucial part of the algorithm.
[01:36:25.000 --> 01:36:33.000]   It's responsible for applications to care and underlying computer applications.
[01:36:33.000 --> 01:36:45.000]   It's just an abstraction layer between processes and calculus.
